# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"groups\""
type groups {
    id: uuid!
    name: String!
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "An aggregate relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
}

"aggregated selection of \"groups\""
type groups_aggregate {
    aggregate: groups_aggregate_fields
    nodes: [groups!]!
}

"aggregate fields of \"groups\""
type groups_aggregate_fields {
    count(columns: [groups_select_column!], distinct: Boolean): Int!
    max: groups_max_fields
    min: groups_min_fields
}

"aggregate max on columns"
type groups_max_fields {
    id: uuid
    name: String
}

"aggregate min on columns"
type groups_min_fields {
    id: uuid
    name: String
}

"response of any mutation on the table \"groups\""
type groups_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [groups!]!
}

"mutation root"
type mutation_root {
    "delete data from the table: \"groups\""
    delete_groups(
        "filter the rows which have to be deleted"
        where: groups_bool_exp!
    ): groups_mutation_response
    "delete single row from the table: \"groups\""
    delete_groups_by_pk(id: uuid!): groups
    "delete data from the table: \"profile_users\""
    delete_profile_users(
        "filter the rows which have to be deleted"
        where: profile_users_bool_exp!
    ): profile_users_mutation_response
    "delete single row from the table: \"profile_users\""
    delete_profile_users_by_pk(id: uuid!): profile_users
    "delete data from the table: \"profiles\""
    delete_profiles(
        "filter the rows which have to be deleted"
        where: profiles_bool_exp!
    ): profiles_mutation_response
    "delete single row from the table: \"profiles\""
    delete_profiles_by_pk(id: uuid!): profiles
    "delete data from the table: \"users\""
    delete_users(
        "filter the rows which have to be deleted"
        where: users_bool_exp!
    ): users_mutation_response
    "delete single row from the table: \"users\""
    delete_users_by_pk(id: uuid!): users
    "insert data into the table: \"groups\""
    insert_groups(
        "the rows to be inserted"
        objects: [groups_insert_input!]!,
        "on conflict condition"
        on_conflict: groups_on_conflict
    ): groups_mutation_response
    "insert a single row into the table: \"groups\""
    insert_groups_one(
        "the row to be inserted"
        object: groups_insert_input!,
        "on conflict condition"
        on_conflict: groups_on_conflict
    ): groups
    "insert data into the table: \"profile_users\""
    insert_profile_users(
        "the rows to be inserted"
        objects: [profile_users_insert_input!]!,
        "on conflict condition"
        on_conflict: profile_users_on_conflict
    ): profile_users_mutation_response
    "insert a single row into the table: \"profile_users\""
    insert_profile_users_one(
        "the row to be inserted"
        object: profile_users_insert_input!,
        "on conflict condition"
        on_conflict: profile_users_on_conflict
    ): profile_users
    "insert data into the table: \"profiles\""
    insert_profiles(
        "the rows to be inserted"
        objects: [profiles_insert_input!]!,
        "on conflict condition"
        on_conflict: profiles_on_conflict
    ): profiles_mutation_response
    "insert a single row into the table: \"profiles\""
    insert_profiles_one(
        "the row to be inserted"
        object: profiles_insert_input!,
        "on conflict condition"
        on_conflict: profiles_on_conflict
    ): profiles
    "insert data into the table: \"users\""
    insert_users(
        "the rows to be inserted"
        objects: [users_insert_input!]!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users_mutation_response
    "insert a single row into the table: \"users\""
    insert_users_one(
        "the row to be inserted"
        object: users_insert_input!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users
    "update data of the table: \"groups\""
    update_groups(
        "sets the columns of the filtered rows to the given values"
        _set: groups_set_input,
        "filter the rows which have to be updated"
        where: groups_bool_exp!
    ): groups_mutation_response
    "update single row of the table: \"groups\""
    update_groups_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: groups_set_input,
        pk_columns: groups_pk_columns_input!
    ): groups
    "update data of the table: \"profile_users\""
    update_profile_users(
        "sets the columns of the filtered rows to the given values"
        _set: profile_users_set_input,
        "filter the rows which have to be updated"
        where: profile_users_bool_exp!
    ): profile_users_mutation_response
    "update single row of the table: \"profile_users\""
    update_profile_users_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: profile_users_set_input,
        pk_columns: profile_users_pk_columns_input!
    ): profile_users
    "update data of the table: \"profiles\""
    update_profiles(
        "sets the columns of the filtered rows to the given values"
        _set: profiles_set_input,
        "filter the rows which have to be updated"
        where: profiles_bool_exp!
    ): profiles_mutation_response
    "update single row of the table: \"profiles\""
    update_profiles_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: profiles_set_input,
        pk_columns: profiles_pk_columns_input!
    ): profiles
    "update data of the table: \"users\""
    update_users(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        "filter the rows which have to be updated"
        where: users_bool_exp!
    ): users_mutation_response
    "update single row of the table: \"users\""
    update_users_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        pk_columns: users_pk_columns_input!
    ): users
}

"columns and relationships of \"profile_users\""
type profile_users {
    id: uuid!
    "An object relationship"
    profile: profiles!
    profile_id: uuid!
    "An object relationship"
    user: users!
    user_id: uuid!
}

"aggregated selection of \"profile_users\""
type profile_users_aggregate {
    aggregate: profile_users_aggregate_fields
    nodes: [profile_users!]!
}

"aggregate fields of \"profile_users\""
type profile_users_aggregate_fields {
    count(columns: [profile_users_select_column!], distinct: Boolean): Int!
    max: profile_users_max_fields
    min: profile_users_min_fields
}

"aggregate max on columns"
type profile_users_max_fields {
    id: uuid
    profile_id: uuid
    user_id: uuid
}

"aggregate min on columns"
type profile_users_min_fields {
    id: uuid
    profile_id: uuid
    user_id: uuid
}

"response of any mutation on the table \"profile_users\""
type profile_users_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [profile_users!]!
}

"columns and relationships of \"profiles\""
type profiles {
    id: uuid!
    nickname: String!
    "fetch data from the table: \"profile_users\""
    profile_users(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): [profile_users!]!
    "An aggregate relationship"
    profile_users_aggregate(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): profile_users_aggregate!
    "An object relationship"
    user: users!
}

"aggregated selection of \"profiles\""
type profiles_aggregate {
    aggregate: profiles_aggregate_fields
    nodes: [profiles!]!
}

"aggregate fields of \"profiles\""
type profiles_aggregate_fields {
    count(columns: [profiles_select_column!], distinct: Boolean): Int!
    max: profiles_max_fields
    min: profiles_min_fields
}

"aggregate max on columns"
type profiles_max_fields {
    id: uuid
    nickname: String
}

"aggregate min on columns"
type profiles_min_fields {
    id: uuid
    nickname: String
}

"response of any mutation on the table \"profiles\""
type profiles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [profiles!]!
}

type query_root {
    "fetch data from the table: \"groups\""
    groups(
        "distinct select on columns"
        distinct_on: [groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [groups_order_by!],
        "filter the rows returned"
        where: groups_bool_exp
    ): [groups!]!
    "fetch aggregated fields from the table: \"groups\""
    groups_aggregate(
        "distinct select on columns"
        distinct_on: [groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [groups_order_by!],
        "filter the rows returned"
        where: groups_bool_exp
    ): groups_aggregate!
    "fetch data from the table: \"groups\" using primary key columns"
    groups_by_pk(id: uuid!): groups
    "fetch data from the table: \"profile_users\""
    profile_users(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): [profile_users!]!
    "An aggregate relationship"
    profile_users_aggregate(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): profile_users_aggregate!
    "fetch data from the table: \"profile_users\" using primary key columns"
    profile_users_by_pk(id: uuid!): profile_users
    "fetch data from the table: \"profiles\""
    profiles(
        "distinct select on columns"
        distinct_on: [profiles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profiles_order_by!],
        "filter the rows returned"
        where: profiles_bool_exp
    ): [profiles!]!
    "fetch aggregated fields from the table: \"profiles\""
    profiles_aggregate(
        "distinct select on columns"
        distinct_on: [profiles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profiles_order_by!],
        "filter the rows returned"
        where: profiles_bool_exp
    ): profiles_aggregate!
    "fetch data from the table: \"profiles\" using primary key columns"
    profiles_by_pk(id: uuid!): profiles
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "An aggregate relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

type subscription_root {
    "fetch data from the table: \"groups\""
    groups(
        "distinct select on columns"
        distinct_on: [groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [groups_order_by!],
        "filter the rows returned"
        where: groups_bool_exp
    ): [groups!]!
    "fetch aggregated fields from the table: \"groups\""
    groups_aggregate(
        "distinct select on columns"
        distinct_on: [groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [groups_order_by!],
        "filter the rows returned"
        where: groups_bool_exp
    ): groups_aggregate!
    "fetch data from the table: \"groups\" using primary key columns"
    groups_by_pk(id: uuid!): groups
    "fetch data from the table: \"profile_users\""
    profile_users(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): [profile_users!]!
    "An aggregate relationship"
    profile_users_aggregate(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): profile_users_aggregate!
    "fetch data from the table: \"profile_users\" using primary key columns"
    profile_users_by_pk(id: uuid!): profile_users
    "fetch data from the table: \"profiles\""
    profiles(
        "distinct select on columns"
        distinct_on: [profiles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profiles_order_by!],
        "filter the rows returned"
        where: profiles_bool_exp
    ): [profiles!]!
    "fetch aggregated fields from the table: \"profiles\""
    profiles_aggregate(
        "distinct select on columns"
        distinct_on: [profiles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profiles_order_by!],
        "filter the rows returned"
        where: profiles_bool_exp
    ): profiles_aggregate!
    "fetch data from the table: \"profiles\" using primary key columns"
    profiles_by_pk(id: uuid!): profiles
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "An aggregate relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

"columns and relationships of \"users\""
type users {
    created_at: timestamptz!
    "An object relationship"
    group: groups
    group_id: uuid
    id: uuid!
    name: String!
    "An object relationship"
    profile: profiles
    profile_id: uuid
    "fetch data from the table: \"profile_users\""
    profile_users(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): [profile_users!]!
    "An aggregate relationship"
    profile_users_aggregate(
        "distinct select on columns"
        distinct_on: [profile_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [profile_users_order_by!],
        "filter the rows returned"
        where: profile_users_bool_exp
    ): profile_users_aggregate!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int!
    max: users_max_fields
    min: users_min_fields
}

"aggregate max on columns"
type users_max_fields {
    created_at: timestamptz
    group_id: uuid
    id: uuid
    name: String
    profile_id: uuid
}

"aggregate min on columns"
type users_min_fields {
    created_at: timestamptz
    group_id: uuid
    id: uuid
    name: String
    profile_id: uuid
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [users!]!
}

"unique or primary key constraints on table \"groups\""
enum groups_constraint {
    "unique or primary key constraint"
    groups_pkey
}

"select columns of table \"groups\""
enum groups_select_column {
    "column name"
    id
    "column name"
    name
}

"update columns of table \"groups\""
enum groups_update_column {
    "column name"
    id
    "column name"
    name
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"profile_users\""
enum profile_users_constraint {
    "unique or primary key constraint"
    profile_users_pkey
}

"select columns of table \"profile_users\""
enum profile_users_select_column {
    "column name"
    id
    "column name"
    profile_id
    "column name"
    user_id
}

"update columns of table \"profile_users\""
enum profile_users_update_column {
    "column name"
    id
    "column name"
    profile_id
    "column name"
    user_id
}

"unique or primary key constraints on table \"profiles\""
enum profiles_constraint {
    "unique or primary key constraint"
    profiles_pkey
}

"select columns of table \"profiles\""
enum profiles_select_column {
    "column name"
    id
    "column name"
    nickname
}

"update columns of table \"profiles\""
enum profiles_update_column {
    "column name"
    id
    "column name"
    nickname
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    "unique or primary key constraint"
    users_pkey
    "unique or primary key constraint"
    users_profile_id_key
}

"select columns of table \"users\""
enum users_select_column {
    "column name"
    created_at
    "column name"
    group_id
    "column name"
    id
    "column name"
    name
    "column name"
    profile_id
}

"update columns of table \"users\""
enum users_update_column {
    "column name"
    created_at
    "column name"
    group_id
    "column name"
    id
    "column name"
    name
    "column name"
    profile_id
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"groups\". All fields are combined with a logical 'AND'."
input groups_bool_exp {
    _and: [groups_bool_exp!]
    _not: groups_bool_exp
    _or: [groups_bool_exp!]
    id: uuid_comparison_exp
    name: String_comparison_exp
    users: users_bool_exp
}

"input type for inserting data into table \"groups\""
input groups_insert_input {
    id: uuid
    name: String
    users: users_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"groups\""
input groups_obj_rel_insert_input {
    data: groups_insert_input!
    "on conflict condition"
    on_conflict: groups_on_conflict
}

"on conflict condition type for table \"groups\""
input groups_on_conflict {
    constraint: groups_constraint!
    update_columns: [groups_update_column!]! = []
    where: groups_bool_exp
}

"Ordering options when selecting data from \"groups\"."
input groups_order_by {
    id: order_by
    name: order_by
    users_aggregate: users_aggregate_order_by
}

"primary key columns input for table: groups"
input groups_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"groups\""
input groups_set_input {
    id: uuid
    name: String
}

"order by aggregate values of table \"profile_users\""
input profile_users_aggregate_order_by {
    count: order_by
    max: profile_users_max_order_by
    min: profile_users_min_order_by
}

"input type for inserting array relation for remote table \"profile_users\""
input profile_users_arr_rel_insert_input {
    data: [profile_users_insert_input!]!
    "on conflict condition"
    on_conflict: profile_users_on_conflict
}

"Boolean expression to filter rows from the table \"profile_users\". All fields are combined with a logical 'AND'."
input profile_users_bool_exp {
    _and: [profile_users_bool_exp!]
    _not: profile_users_bool_exp
    _or: [profile_users_bool_exp!]
    id: uuid_comparison_exp
    profile: profiles_bool_exp
    profile_id: uuid_comparison_exp
    user: users_bool_exp
    user_id: uuid_comparison_exp
}

"input type for inserting data into table \"profile_users\""
input profile_users_insert_input {
    id: uuid
    profile: profiles_obj_rel_insert_input
    profile_id: uuid
    user: users_obj_rel_insert_input
    user_id: uuid
}

"order by max() on columns of table \"profile_users\""
input profile_users_max_order_by {
    id: order_by
    profile_id: order_by
    user_id: order_by
}

"order by min() on columns of table \"profile_users\""
input profile_users_min_order_by {
    id: order_by
    profile_id: order_by
    user_id: order_by
}

"on conflict condition type for table \"profile_users\""
input profile_users_on_conflict {
    constraint: profile_users_constraint!
    update_columns: [profile_users_update_column!]! = []
    where: profile_users_bool_exp
}

"Ordering options when selecting data from \"profile_users\"."
input profile_users_order_by {
    id: order_by
    profile: profiles_order_by
    profile_id: order_by
    user: users_order_by
    user_id: order_by
}

"primary key columns input for table: profile_users"
input profile_users_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"profile_users\""
input profile_users_set_input {
    id: uuid
    profile_id: uuid
    user_id: uuid
}

"Boolean expression to filter rows from the table \"profiles\". All fields are combined with a logical 'AND'."
input profiles_bool_exp {
    _and: [profiles_bool_exp!]
    _not: profiles_bool_exp
    _or: [profiles_bool_exp!]
    id: uuid_comparison_exp
    nickname: String_comparison_exp
    profile_users: profile_users_bool_exp
    user: users_bool_exp
}

"input type for inserting data into table \"profiles\""
input profiles_insert_input {
    id: uuid
    nickname: String
    profile_users: profile_users_arr_rel_insert_input
    user: users_obj_rel_insert_input
}

"input type for inserting object relation for remote table \"profiles\""
input profiles_obj_rel_insert_input {
    data: profiles_insert_input!
    "on conflict condition"
    on_conflict: profiles_on_conflict
}

"on conflict condition type for table \"profiles\""
input profiles_on_conflict {
    constraint: profiles_constraint!
    update_columns: [profiles_update_column!]! = []
    where: profiles_bool_exp
}

"Ordering options when selecting data from \"profiles\"."
input profiles_order_by {
    id: order_by
    nickname: order_by
    profile_users_aggregate: profile_users_aggregate_order_by
    user: users_order_by
}

"primary key columns input for table: profiles"
input profiles_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"profiles\""
input profiles_set_input {
    id: uuid
    nickname: String
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"order by aggregate values of table \"users\""
input users_aggregate_order_by {
    count: order_by
    max: users_max_order_by
    min: users_min_order_by
}

"input type for inserting array relation for remote table \"users\""
input users_arr_rel_insert_input {
    data: [users_insert_input!]!
    "on conflict condition"
    on_conflict: users_on_conflict
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp!]
    _not: users_bool_exp
    _or: [users_bool_exp!]
    created_at: timestamptz_comparison_exp
    group: groups_bool_exp
    group_id: uuid_comparison_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    profile: profiles_bool_exp
    profile_id: uuid_comparison_exp
    profile_users: profile_users_bool_exp
}

"input type for inserting data into table \"users\""
input users_insert_input {
    created_at: timestamptz
    group: groups_obj_rel_insert_input
    group_id: uuid
    id: uuid
    name: String
    profile: profiles_obj_rel_insert_input
    profile_id: uuid
    profile_users: profile_users_arr_rel_insert_input
}

"order by max() on columns of table \"users\""
input users_max_order_by {
    created_at: order_by
    group_id: order_by
    id: order_by
    name: order_by
    profile_id: order_by
}

"order by min() on columns of table \"users\""
input users_min_order_by {
    created_at: order_by
    group_id: order_by
    id: order_by
    name: order_by
    profile_id: order_by
}

"input type for inserting object relation for remote table \"users\""
input users_obj_rel_insert_input {
    data: users_insert_input!
    "on conflict condition"
    on_conflict: users_on_conflict
}

"on conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]! = []
    where: users_bool_exp
}

"Ordering options when selecting data from \"users\"."
input users_order_by {
    created_at: order_by
    group: groups_order_by
    group_id: order_by
    id: order_by
    name: order_by
    profile: profiles_order_by
    profile_id: order_by
    profile_users_aggregate: profile_users_aggregate_order_by
}

"primary key columns input for table: users"
input users_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"users\""
input users_set_input {
    created_at: timestamptz
    group_id: uuid
    id: uuid
    name: String
    profile_id: uuid
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar timestamptz

scalar uuid